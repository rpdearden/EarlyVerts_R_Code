for (j in 2:length(tbins)) {
acctranbins[(j-1),i]<-length(intersect(grep(TRUE,changes <= tbins[(j-1)]),grep(TRUE,changes > tbins[j])))
bin.crossers<-intersect(grep(TRUE,fos >= tbins[(j-1)]),grep(TRUE,los <= tbins[j])) # Taxa that pass straight through bin
bin.bottoms<-intersect(intersect(grep(TRUE,fos >= tbins[(j-1)]),grep(TRUE,los > tbins[j])),grep(TRUE,los < tbins[(j-1)]))  # Taxa that span base of bin only
bin.tops<-intersect(intersect(grep(TRUE,fos < tbins[(j-1)]),grep(TRUE,fos > tbins[j])),grep(TRUE,los <= tbins[j]))
bin.within<-intersect(intersect(intersect(grep(TRUE,fos < tbins[(j-1)]),grep(TRUE,los > tbins[j])),grep(TRUE,fos > tbins[j])),grep(TRUE,los < tbins[(j-1)]))
acctran.sumlineages[(j-1),i]<-(length(bin.crossers)*(tbins[(j-1)]-tbins[j]))+sum(tbins[(j-1)]-los[bin.bottoms])+sum(fos[bin.tops]-tbins[j])+sum(fos[bin.within]-los[bin.within])
}#Changed first + to a -, think this is correct
x<-tbins[1:(length(tbins)-1)]-((tbins[1:(length(tbins)-1)]-tbins[2:length(tbins)])/2)
# Make matrix for storing counts:
acctran.sumlineages<-acctranbins<-matrix(ncol=ntrials,nrow=length(tbins)-1)
cat(i," ")
}
#Changed first + to a -, think this is correct
x<-tbins[1:(length(tbins)-1)]-((tbins[1:(length(tbins)-1)]-tbins[2:length(tbins)])/2)
# Make matrix for storing counts:
acctran.sumlineages<-acctranbins<-matrix(ncol=ntrials,nrow=length(tbins)-1)
# Main loop:
for (i in 1:ntrials) {
# Pick a random edge between the limits: (for each column pics a random age from a uniform distribution between the FAD and LAD)
for (j in 1:length(ages[,1])) ages[j,1]<-runif(1,daterr[j,2],daterr[j,1])
#dates phylogeny on basis of these dates
ttreeb<-date.phylo(tree, ages[tree$tip.label,], rlen=2, method="ruta", ptree)
nodeages<-date.nodes(ttreeb, max(ages)+2)
los<-nodeages[ttreeb$edge[,2]]
fos<-nodeages[ttreeb$edge[,1]]
changes<-vector(mode="numeric")
for (j in 1:length(tree$edge.length))       changes<-c(changes,runif(tree$edge.length[j],nodeages[ttreeb$edge[j,2]],nodeages[ttreeb$edge[j,1]]))
for (j in 2:length(tbins)) {
acctranbins[(j-1),i]<-length(intersect(grep(TRUE,changes <= tbins[(j-1)]),grep(TRUE,changes > tbins[j])))
bin.crossers<-intersect(grep(TRUE,fos >= tbins[(j-1)]),grep(TRUE,los <= tbins[j])) # Taxa that pass straight through bin
bin.bottoms<-intersect(intersect(grep(TRUE,fos >= tbins[(j-1)]),grep(TRUE,los > tbins[j])),grep(TRUE,los < tbins[(j-1)]))  # Taxa that span base of bin only
bin.tops<-intersect(intersect(grep(TRUE,fos < tbins[(j-1)]),grep(TRUE,fos > tbins[j])),grep(TRUE,los <= tbins[j]))
bin.within<-intersect(intersect(intersect(grep(TRUE,fos < tbins[(j-1)]),grep(TRUE,los > tbins[j])),grep(TRUE,fos > tbins[j])),grep(TRUE,los < tbins[(j-1)]))
acctran.sumlineages[(j-1),i]<-(length(bin.crossers)*(tbins[(j-1)]-tbins[j]))+sum(tbins[(j-1)]-los[bin.bottoms])+sum(fos[bin.tops]-tbins[j])+sum(fos[bin.within]-los[bin.within])
}
cat(i," ")
}
x
tbins <- c(541,307,250)
x<-tbins[1:(length(tbins)-1)]-((tbins[1:(length(tbins)-1)]-tbins[2:length(tbins)])/2)
acctran.sumlineages<-acctranbins<-matrix(ncol=ntrials,nrow=length(tbins)-1)
# Main loop: output of this is a filled in deltran table
for (i in 1:ntrials) {
# Pick a random age between the limits: (for each column pics a random age from a uniform distribution between the FAD and LAD
for (j in 1:length(ages[,1])) ages[j,1]<-runif(1,daterr[j,2],daterr[j,1])
#dates phylogeny on basis of these dates
ttreeb<-date.phylo(tree, ages[tree$tip.label,], rlen=2, method="ruta", ptree)
nodeages<-date.nodes(ttreeb, max(ages)+2)
los<-nodeages[ttreeb$edge[,2]]
fos<-nodeages[ttreeb$edge[,1]]
changes<-vector(mode="numeric")
for (j in 1:length(tree$edge.length)) changes<-c(changes,runif(tree$edge.length[j],nodeages[ttreeb$edge[j,2]],nodeages[ttreeb$edge[j,1]]))
for (j in 2:length(tbins)) {
deltranbins[(j-1),i]<-length(intersect(grep(TRUE,changes <= tbins[(j-1)]),grep(TRUE,changes > tbins[j])))
bin.crossers<-intersect(grep(TRUE,fos >= tbins[(j-1)]),grep(TRUE,los <= tbins[j])) # Taxa that pass straight through bin
bin.bottoms<-intersect(intersect(grep(TRUE,fos >= tbins[(j-1)]),grep(TRUE,los > tbins[j])),grep(TRUE,los < tbins[(j-1)]))  # Taxa that span base of bin only
bin.tops<-intersect(intersect(grep(TRUE,fos < tbins[(j-1)]),grep(TRUE,fos > tbins[j])),grep(TRUE,los <= tbins[j]))
bin.within<-intersect(intersect(intersect(grep(TRUE,fos < tbins[(j-1)]),grep(TRUE,los > tbins[j])),grep(TRUE,fos > tbins[j])),grep(TRUE,los < tbins[(j-1)]))
deltran.sumlineages[(j-1),i]<-(length(bin.crossers)*(tbins[(j-1)]-tbins[j]))+sum(tbins[(j-1)]-los[bin.bottoms])+sum(fos[bin.tops]-tbins[j])+sum(fos[bin.within]-los[bin.within])
}
cat(i," ")
}
library(dispRity)
library(geomorph)
library(vegan)
library(cluster)
library(Claddis)
setwd("~/Documents/Side_projects/Masters_writeup/EarlyVerts_R_Code/dispRity_Pipeline")
#Kdata <- ReadMorphNexus("../Keating16.nex")
Ktree <- read.nexus("../KeatMaj.tre")
Kdates <- read.csv("../Keating16Dates.csv", header=TRUE,row.names=1)
Kmatrix <- read.csv("../Keating16.csv", header=TRUE, row.names=1, stringsAsFactors = FALSE, na.strings="?") #Reads ? as NA?
#Replace - with -1 (will become 0 later)
Kmatrix[Kmatrix=="-"] <- -1
#Convert all remaining character columns into numeric
indx <- sapply(Kmatrix, is.character)
Kmatrix[indx] <- lapply(Kmatrix[indx], function(Kmatrix) as.numeric(as.character(Kmatrix)))
#Add 1 to all values
Kdata <- Kmatrix+1
#Calculate distances with Gower's coefficient
Kdistances=daisy(Kdata, metric=c("gower"))
#Ordinate usiing NMDS
kdataNMDS<-metaMDS(Kdistances, k=3, zerodist="add")
#n.b. Ordination is stored in:
Ordkdata<-kdataNMDS$points
#Normal with text
plot(kdataNMDS)
text(kdataNMDS, cex=0.8)
#Run metaMDS with different numbers of axes
NMDS1=metaMDS(Kdistances, k=1, zerodist="add")
NMDS2=metaMDS(Kdistances, k=2, zerodist="add")
NMDS3=metaMDS(Kdistances, k=3, zerodist="add")
NMDS4=metaMDS(Kdistances, k=4, zerodist="add")
NMDS5=metaMDS(Kdistances, k=5, zerodist="add")
NMDS6=metaMDS(Kdistances, k=6, zerodist="add")
NMDS7=metaMDS(Kdistances, k=7, zerodist="add")
NMDS8=metaMDS(Kdistances, k=8, zerodist="add")
NMDS9=metaMDS(Kdistances, k=9, zerodist="add")
NMDS10=metaMDS(Kdistances, k=10, zerodist="add")
#Make vector containing stresses
Stresses=c(NMDS1$stress, NMDS2$stress, NMDS3$stress, NMDS4$stress, NMDS5$stress, NMDS6$stress, NMDS7$stress, NMDS8$stress, NMDS9$stress, NMDS10$stress)
#Plot it
barplot(Stresses, ylim=c(0, 0.30), names.arg=c(1:10), xlab="No. of axes", ylab="Stress")
?Claddis
#define
time_slices <- c(541,485,444,419,359)
time_slices <- c(541,485,444,419,359)
kdataNMDS
Ordkdata
#define
time_slices <- c(541,485,444,419,359)
#Make stacked ordination plots for geological periods
StackPlot(Ordkdata, KDates, time_slices)
time_slices <- c(541,485,444,419,359)
StackPlot(Ordkdata, KDates, time_slices)
groups <- sample(x = c("red", "blue"), size = nrow(ordination_axes), replace = TRUE)
groups
groups <- sample(x = c("red", "blue"), size = nrow(Ordkdata), replace = TRUE)
groups
StackPlot(Ordkdata, KDates, groups, time_slices)
Kdates <- read.csv("../Keating16Dates.csv", header=TRUE,row.names=1)
StackPlot(Ordkdata, KDates, groups, time_slices)
ages <- matrix(as.vector(apply(matrix(runif(200, 0, 100), ncol = 2), 1, sort,
decreasing = TRUE)), ncol = 2, byrow=TRUE, dimnames =
list(as.list(rownames(ordination_axes)), as.list(c("FAD", "LAD"))))
ages
StackPlot(Ordkdata, Kdates, groups, time_slices)
#define
time_slices <- c(541,485,444,419,359)
#Define groups
groups <- sample(x = c("red", "blue"), size = nrow(Ordkdata), replace = TRUE)
#Make stacked ordination plots for geological periods
StackPlot(Ordkdata, KDates, groups, time_slices)
#define
time_slices <- c(541,485,444,419,359)
#Define groups
groups <- sample(x = c("red", "blue"), size = nrow(Ordkdata), replace = TRUE)
#Make stacked ordination plots for geological periods
StackPlot(Ordkdata, Kdates, groups, time_slices)
Kdates
plot(Ordkdata)
#Run metaMDS with different numbers of axes
NMDS1=metaMDS(Kdistances, k=1, zerodist="add")
NMDS2=metaMDS(Kdistances, k=2, zerodist="add")
NMDS3=metaMDS(Kdistances, k=3, zerodist="add")
NMDS4=metaMDS(Kdistances, k=4, zerodist="add")
NMDS5=metaMDS(Kdistances, k=5, zerodist="add")
NMDS6=metaMDS(Kdistances, k=6, zerodist="add")
NMDS7=metaMDS(Kdistances, k=7, zerodist="add")
NMDS8=metaMDS(Kdistances, k=8, zerodist="add")
NMDS9=metaMDS(Kdistances, k=9, zerodist="add")
NMDS10=metaMDS(Kdistances, k=10, zerodist="add")
#Make vector containing stresses
Stresses=c(NMDS1$stress, NMDS2$stress, NMDS3$stress, NMDS4$stress, NMDS5$stress, NMDS6$stress, NMDS7$stress, NMDS8$stress, NMDS9$stress, NMDS10$stress)
#Plot it
barplot(Stresses, ylim=c(0, 0.30), names.arg=c(1:10), xlab="No. of axes", ylab="Stress")
# Create x-values that will form a grid:
x <- c(c(seq(0, 100, length.out = 101), seq(0, 100, length.out = 101),
seq(0, 100, length.out = 101), seq(0, 100, length.out = 101)),
c(rep(20, 101), rep(40, 101), rep(60, 101), rep(80, 101)))
# Create y-values that will form grid:
y <- c(c(rep(20, 101), rep(40, 101), rep(60, 101), rep(80, 101)),
c(seq(0, 100, length.out = 101), seq(0, 100, length.out = 101),
seq(0, 100, length.out = 101), seq(0, 100, length.out = 101)))
# Combine x and y values into
ordination_axes <- matrix(c(x, y), ncol = 2, dimnames =
list(as.list(apply(matrix(sample(LETTERS, 8 * 8 * 101,
replace = TRUE), nrow = 8 * 101), 1, paste, collapse = "")), NULL))
# Assign ages as though taxa range through entire interval (100-0 Ma):
ages <- matrix(c(rep(100, 8 * 101), rep(0, 8 * 101)), ncol = 2,
dimnames = list(as.list(rownames(ordination_axes)), as.list(c("FAD",
"LAD"))))
# Create five 20 million year time slices:
time_slices <- seq(0, 100, length.out = 6)
# Plot grid lines to show "shearing" effect is working:
StackPlot(ordination_axes = ordination_axes, ages = ages, time_slices = time_slices)
# Set random seed:
set.seed(17)
# Create random values to represent ordination axes:
ordination_axes <- matrix(rnorm(10000), nrow = 100, dimnames =
list(as.list(apply(matrix(sample(LETTERS, 8 * 100, replace = TRUE), nrow = 100),
1, paste, collapse = "")), NULL))
# Create random first and last appearance dates for objects:
ages <- matrix(as.vector(apply(matrix(runif(200, 0, 100), ncol = 2), 1, sort,
decreasing = TRUE)), ncol = 2, byrow=TRUE, dimnames =
list(as.list(rownames(ordination_axes)), as.list(c("FAD", "LAD"))))
# Create five 20 million year long time slices:
time_slices <- seq(0, 100, length.out = 6)
# Define groups for objects at random ("red" and "blue"):
groups <- sample(x = c("red", "blue"), size = nrow(ordination_axes), replace = TRUE)
# Randomly assign objects to groups:
names(groups) <- rownames(ordination_axes)
# Make stacked ordination plot with convex hulls for groups:
StackPlot(ordination_axes, ages, groups, time_slices)
ages
ordination_axes
time_slices
StackPlot(ordination_axes = ordination_axes, ages = ages, time_slices = time_slices)
#define
time_slices <- c(541,485,444,419,359)
#Define groups
groups <- sample(x = c("red", "blue"), size = nrow(Ordkdata), replace = TRUE)
#Make stacked ordination plots for geological periods
StackPlot(Ordkdata, Kdates, groups, time_slices)
StackPlot(ordination_axes=Ordkdata, ages=Kdates, time_slices=time_slices)
#define
time_slices <- c(541,485,444,419,359)
#Define groups and assign randomly
groups <- sample(x = c("red", "blue"), size = nrow(Ordkdata), replace = TRUE)
names(groups) <- rownames(Ordkdata)
#Make stacked ordination plots for geological periods
StackPlot(ordination_axes=Ordkdata, ages=Kdates, groups=groups, time_slices=time_slices)
#define
time_slices <- c(541,485,444,419,359)
#Define groups and assign randomly
groups <- sample(x = c("red", "blue"), size = nrow(Ordkdata), replace = TRUE)
names(groups) <- rownames(Ordkdata)
#Make stacked ordination plots for geological periods
StackPlot(ordination_axes=Ordkdata, ages=Kdates, groups=groups, time_slices=time_slices)
?MultiOrdinationSpace
?Claddis
plot(Ordkdata)
Ctree <- read.nexus("../Strict.nex")
Cdates <- read.csv("../CoatesDates2.csv", header=TRUE,row.names=1)
Cmatrix <- read.csv("../CoatesMatrix.csv", header=TRUE, row.names=1, stringsAsFactors = FALSE, na.strings="?") #Reads ? as NA?
plot(Ctree)
Cdates
Kdates
#For Coates
#Replace - with -1 (will become 0 later)
Cmatrix[Cmatrix=="-"] <- -1
#Convert all remaining character columns into numeric
indx <- sapply(Cmatrix, is.character)
Cmatrix[indx] <- lapply(Cmatrix[indx], function(Cmatrix) as.numeric(as.character(Cmatrix)))
#Add 1 to all values
Cdata <- Cmatrix+1
Cdata
#Coates
#Calculate distances with Gower's coefficient
Cdistances=daisy(Cdata, metric=c("gower"))
#Ordinate usiing NMDS
CdataNMDS<-metaMDS(Cdistances, k=3, zerodist="add")
#n.b. Ordination is stored in:
OrdCdata<-CdataNMDS$points
OrdCdata
plot(OrdCdata)
text(CdataNMDS, cex=0.8)
#Run metaMDS with different numbers of axes
NMDS1=metaMDS(Cdistances, k=1, zerodist="add")
NMDS2=metaMDS(Cdistances, k=2, zerodist="add")
NMDS3=metaMDS(Cdistances, k=3, zerodist="add")
NMDS4=metaMDS(Cdistances, k=4, zerodist="add")
NMDS5=metaMDS(Cdistances, k=5, zerodist="add")
NMDS6=metaMDS(Cdistances, k=6, zerodist="add")
NMDS7=metaMDS(Cdistances, k=7, zerodist="add")
NMDS8=metaMDS(Cdistances, k=8, zerodist="add")
NMDS9=metaMDS(Cdistances, k=9, zerodist="add")
NMDS10=metaMDS(Cdistances, k=10, zerodist="add")
#Make vector containing stresses
Stresses=c(NMDS1$stress, NMDS2$stress, NMDS3$stress, NMDS4$stress, NMDS5$stress, NMDS6$stress, NMDS7$stress, NMDS8$stress, NMDS9$stress, NMDS10$stress)
#Plot it
barplot(Stresses, ylim=c(0, 0.30), names.arg=c(1:10), xlab="No. of axes", ylab="Stress")
barplot(Stresses, ylim=c(0, 0.30), names.arg=c(1:10), xlab="No. of axes", ylab="Stress")
#define
time_slices <- c(541,485,444,419,359)
#Define groups and assign randomly
groups <- sample(x = c("red", "blue"), size = nrow(Ordcdata), replace = TRUE)
#define
time_slices <- c(541,485,444,419,359)
#Define groups and assign randomly
groups <- sample(x = c("red", "blue"), size = nrow(Ordcdata), replace = TRUE)
OrdCdata<-CdataNMDS$points
#define
time_slices <- c(541,485,444,419,359)
#Define groups and assign randomly
groups <- sample(x = c("red", "blue"), size = nrow(Ordcdata), replace = TRUE)
#define
time_slices <- c(541,485,444,419,359)
#Define groups and assign randomly
groups <- sample(x = c("red", "blue"), size = nrow(OrdCdata), replace = TRUE)
names(groups) <- rownames(OrdCdata)
#Make stacked ordination plots for geological periods
StackPlot(ordination_axes=OrdCdata, ages=Cdates, groups=groups, time_slices=time_slices)
OrdCdata
Cdates
Cdates <- Cdates[match(Ctree$tip.label, rownames(Cdates)),]
Cdates
Ctre
Ctree
summary(Ctree)
OrdCdata <- OrdCdata[match(Ctree$tip.label, rownames(OrdCData)),]
OrdCdata<-CdataNMDS$points
OrdCdata <- OrdCdata[match(Ctree$tip.label, rownames(OrdCData)),]
OrdCdata <- OrdCdata[match(Ctree$tip.label, rownames(OrdCdata)),]
OrdCdata
Cdates
#For Coates
#Replace - with -1 (will become 0 later)
Cmatrix[Cmatrix=="-"] <- -1
#Convert all remaining character columns into numeric
indx <- sapply(Cmatrix, is.character)
Cmatrix[indx] <- lapply(Cmatrix[indx], function(Cmatrix) as.numeric(as.character(Cmatrix)))
#Add 1 to all values
Cdata <- Cmatrix+1
#Calculate distances with Gower's coefficient
Cdistances=daisy(Cdata, metric=c("gower"))
#Ordinate usiing NMDS
CdataNMDS<-metaMDS(Cdistances, k=3, zerodist="add")
#n.b. Ordination is stored in:
OrdCdata<-CdataNMDS$points
OrdCdata <- OrdCdata[match(Ctree$tip.label, rownames(OrdCdata)),]
OrdCdara
OrdCdata
Ctree <- read.nexus("../Strict.nex")
Cdates <- read.csv("../CoatesDates2.csv", header=TRUE,row.names=1)
Cmatrix <- read.csv("../CoatesMatrix.csv", header=TRUE, row.names=1, stringsAsFactors = FALSE, na.strings="?") #Reads ? as NA?
Cdates <- Cdates[match(Ctree$tip.label, rownames(Cdates)),]
Cdates
#For Coates
#Replace - with -1 (will become 0 later)
Cmatrix[Cmatrix=="-"] <- -1
#Convert all remaining character columns into numeric
indx <- sapply(Cmatrix, is.character)
Cmatrix[indx] <- lapply(Cmatrix[indx], function(Cmatrix) as.numeric(as.character(Cmatrix)))
#Add 1 to all values
Cdata <- Cmatrix+1
#Coates
#Calculate distances with Gower's coefficient
Cdistances=daisy(Cdata, metric=c("gower"))
#Ordinate usiing NMDS
CdataNMDS<-metaMDS(Cdistances, k=3, zerodist="add")
#n.b. Ordination is stored in:
OrdCdata<-CdataNMDS$points
OrdCdata
OrdCdata <- OrdCdata[match(Ctree$tip.label, rownames(OrdCdata)),]
OrdCdata
Cdates
Cmatrix <- read.csv("../CoatesMatrix.csv", header=FALSE, row.names=1, stringsAsFactors = FALSE, na.strings="?") #Reads ? as NA?
Cmatrix
#For Coates
#Replace - with -1 (will become 0 later)
Cmatrix[Cmatrix=="-"] <- -1
#Convert all remaining character columns into numeric
indx <- sapply(Cmatrix, is.character)
Cmatrix[indx] <- lapply(Cmatrix[indx], function(Cmatrix) as.numeric(as.character(Cmatrix)))
#Add 1 to all values
Cdata <- Cmatrix+1
#Coates
#Calculate distances with Gower's coefficient
Cdistances=daisy(Cdata, metric=c("gower"))
#Ordinate usiing NMDS
CdataNMDS<-metaMDS(Cdistances, k=3, zerodist="add")
#n.b. Ordination is stored in:
OrdCdata<-CdataNMDS$points
#OrderOrdCdata
OrdCdata <- OrdCdata[match(Ctree$tip.label, rownames(OrdCdata)),]
OrdCdata
plot(tree)
plot(Ctree)
plot(Ctree, cex=0.5)
#Normal with text
plot(OrdCdata)
text(CdataNMDS, cex=0.8)
plot(OrdCdata)
text(CdataNMDS, cex=0.8)
#Run metaMDS with different numbers of axes
NMDS1=metaMDS(Cdistances, k=1, zerodist="add")
NMDS2=metaMDS(Cdistances, k=2, zerodist="add")
NMDS3=metaMDS(Cdistances, k=3, zerodist="add")
NMDS4=metaMDS(Cdistances, k=4, zerodist="add")
NMDS5=metaMDS(Cdistances, k=5, zerodist="add")
NMDS6=metaMDS(Cdistances, k=6, zerodist="add")
NMDS7=metaMDS(Cdistances, k=7, zerodist="add")
NMDS8=metaMDS(Cdistances, k=8, zerodist="add")
NMDS9=metaMDS(Cdistances, k=9, zerodist="add")
NMDS10=metaMDS(Cdistances, k=10, zerodist="add")
#Make vector containing stresses
Stresses=c(NMDS1$stress, NMDS2$stress, NMDS3$stress, NMDS4$stress, NMDS5$stress, NMDS6$stress, NMDS7$stress, NMDS8$stress, NMDS9$stress, NMDS10$stress)
#Plot it
barplot(Stresses, ylim=c(0, 0.30), names.arg=c(1:10), xlab="No. of axes", ylab="Stress")
#define
time_slices <- c(541,485,444,419,359)
#Define groups and assign randomly
groups <- sample(x = c("red", "blue"), size = nrow(OrdCdata), replace = TRUE)
names(groups) <- rownames(OrdCdata)
#Make stacked ordination plots for geological periods
StackPlot(ordination_axes=OrdCdata, ages=Cdates, groups=groups, time_slices=time_slices)
#define
time_slices <- c(443.8,433.4,427.4,419.2,393.3,382.7,359.9)
#Define groups and assign randomly
groups <- sample(x = c("red", "blue"), size = nrow(OrdCdata), replace = TRUE)
names(groups) <- rownames(OrdCdata)
#Make stacked ordination plots for geological periods
StackPlot(ordination_axes=OrdCdata, ages=Cdates, groups=groups, time_slices=time_slices)
#define
time_slices <- c(433.4,427.4,419.2,393.3,382.7,359.9,323.2,298.9)
#Define groups and assign randomly
groups <- sample(x = c("red", "blue"), size = nrow(OrdCdata), replace = TRUE)
names(groups) <- rownames(OrdCdata)
#Make stacked ordination plots for geological periods
StackPlot(ordination_axes=OrdCdata, ages=Cdates, groups=groups, time_slices=time_slices)
OrdCdata
?c
x <- c(1,2,3)
x
x <- c(1,2,3(b))
x <- c(1,2,3=3
x <- c(1,2,3=3)
x <- c(1,2,3 = 3)
rep(v, each=3)
rep(3, each=3)
vector <- c(rep(3, each=3), rep(4, each=3))
vector
?sample
groups<-c(rep("red"), each=28), rep("blue", each=28), rep("orange", each=9), rep("green", each=21))
groups<-c(rep("red", each=28), rep("blue", each=28), rep("orange", each=9), rep("green", each=21))
groups
groups <- sample(x = c("red", "blue"), size = nrow(OrdCdata), replace = TRUE)
groups
groups<-c(rep("red", each=28), rep("blue", each=28), rep("orange", each=9), rep("green", each=21))
names(groups) <- rownames(OrdCdata)
groups<-c(rep("red", each=28), rep("blue", each=28), rep("orange", each=9), rep("green", each=21))
names(groups) <- rownames(OrdCdata)
groups
groups <- sample(x = c("red", "blue"), size = nrow(Ordkdata), replace = TRUE)
names(groups) <- rownames(Ordkdata)
groups
StackPlot(ordination_axes=OrdCdata, ages=Cdates, groups=groups, time_slices=time_slices)
#define
time_slices <- c(433.4,427.4,419.2,393.3,382.7,359.9,323.2,298.9)
#Define groups and assign randomly
groups<-c(rep("red", each=28), rep("blue", each=28), rep("orange", each=9), rep("green", each=21))
names(groups) <- rownames(OrdCdata)
#Make stacked ordination plots for geological periods
StackPlot(ordination_axes=OrdCdata, ages=Cdates, groups=groups, time_slices=time_slices)
time_bins <- time_slices
DatedCtree<-DatePhylo(Ctree, Cdates, method="equal", rlen=1)
time_bins <- time_slices
Ktree$root.time <- 485
DatedCtree<-DatePhylo(Ctree, Cdates, method="equal", rlen=1)
time_bins <- time_slices
binned_Cdata <- chrono.subsets(data = OrdCdata, tree = Ctree, method = "discrete", time = time_bins, inc.nodes = FALSE,FADLAD = Cdates)
Ctree$root.time <- 485
DatedCtree<-DatePhylo(Ctree, Cdates, method="equal", rlen=1)
time_bins <- time_slices
binned_Cdata <- chrono.subsets(data = OrdCdata, tree = Ctree, method = "discrete", time = time_bins, inc.nodes = FALSE,FADLAD = Cdates)
binned_Cdata
boot_bin_Cdata <- boot.matrix(binned_Cdata)
rare_bin_Cdata <- boot.matrix(binned_Cdata, bootstraps = 100,rarefaction = 6)
boot_disparity_Cdata <- dispRity(boot_bin_Cdata, metric = c(sum, variances))
rare_disparity_Cdata <- dispRity(rare_bin_Cdata, metric = c(sum, variances))
quartz(width = 10, height = 5) ; par(mfrow = (c(1,2)), bty = "n")
plot(boot_disparity_Cdata, type = "continuous", main = "bootstrapped results")
plot(rare_disparity_Cdata, type = "continuous", main = "rarefied results")
sharky=Ordkdata[1:56]
sharky
sharky=Ordkdata$rownames[1:56]
sharky=Ordkdata$row.names[1:56]
sharky=OrdCdata[1:56]
sharky
?test.dispRity
names(OrdCdata)
Summary(OrdCdata)
OrdCdata
Ordkdata$row.names
Ordkdata$rownames
Ordkdata[rownames]
sharky=OrdCdata[1:56,]
sharky
?list
groups <- list(sharky=OrdCdata[1:56,], fishy=OrdCdata[57:86,])
groups
#Designate groups
groups <- list(sharky=OrdCdata[1:56,], fishy=OrdCdata[57:86,])
#Make into subsets for disparity
Bonesgroup <- custom.subsets(Ordkdata, group=groups)
#Designate groups
groups <- list(sharky=OrdCdata[1:56,], fishy=OrdCdata[57:86,])
#Make into subsets for disparity
Bonesgroup <- custom.subsets(OrdCdata, group=groups)
groups <- list("sluggy"=c("Cephalochordata", "Tunicata", "Myxinoidea", "Petromyzontida", "Jamoytius", "Euphanerops", "Euconodonta"), bony=c("Heterostraci", "Arandaspida", "Astraspis", "Lasanius", "Birkenia", "Pterygolepis", "Rhyncholepis", "Cowielepis", "Pharyngolepis", "Osteostraci", "Jawed_vertebrates", "Galeaspida", "Loganellia" ,"Turinia"))
groups
groups <- list(sharky=OrdCdata[1:56,], fishy=OrdCdata[57:86,])
groups
rownames(OrdCdata)
rownames(OrdCdata[1:56,])
#Designate groups
groups <- list(sharky=rownames(OrdCdata[1:56,]), fishy=rownames(OrdCdata[57:86,]))
#Make into subsets for disparity
Bonesgroup <- custom.subsets(OrdCdata, group=groups)
group_rare <- boot.matrix(group, bootstraps = 100,rarefaction = 6)
#Designate groups
groups <- list(sharky=rownames(OrdCdata[1:56,]), fishy=rownames(OrdCdata[57:86,]))
#Make into subsets for disparity
group <- custom.subsets(OrdCdata, group=groups)
group_rare <- boot.matrix(group, bootstraps = 100,rarefaction = 6)
group_disp <- dispRity(group_rare, metric = c(sum, variances))
group_Wilcox <- test.dispRity(group_disp, test=wilcox.test)
plot(group_disp, main = "Bones v non-bones")
text(1.5, 4000, paste0("p=",round(group_Wilcox[[2]][[1]], digit = 5)))
#Will make a group for every clade in the tree
Cladesgroup <- custom.subsets(OrdCdata, group=Ctree)
Cladesgroup_rare <- boot.matrix(Cladesgroup, bootstraps = 100,rarefaction = 6)
Cladesgroup_disp <- dispRity(Cladesgroup_rare, metric = c(sum, variances))
Cladesgroup_Wilcox <- test.dispRity(Cladesgroup_disp, test=wilcox.test)
plot(Cladesgroup_disp, main = "Different clades")
text(1.5, 4000, paste0("p=",round(Cladesgroup_Wilcox[[2]][[1]], digit = 5)))
plot(Ktree)
nodelabels()
group_Wilcox <- test.dispRity(group_disp, test=wilcox.test)
group_Wilcox
