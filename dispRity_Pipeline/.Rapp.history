?gsub
?paste0
library(ape)
?ape
library(ape)
ape
?library()
library(dispRity)
install_github("TGuillerme/dispRity", ref = "release")
library(devtools)
if(!require(devtools)) install.packages("devtools")
library(devtools)
install_github("TGuillerme/dispRity", ref = "release")
library(dispRity)
set.seed(123)
data(McClean_data)
ord_matrix <- McClean_data$ordination
data
ord_matrix
library(ape)
library(geiger)
#The getAllSubTrees function below is a necessary subfunction that atomizes a tree into each individual subclade and was provided compliments of Luke Harmon.#
getAllSubtrees<-function(phy, minSize=2) {#
res<-list()#
count=1#
ntip<-length(phy$tip.label)#
for(i in 1:phy$Nnode) {#
l<-node.leaves(phy, ntip+i)#
bt<-match(phy$tip.label, l)#
if(sum(is.na(bt))==0) {#
st<-phy#
} else st<-drop.tip(phy, phy$tip.label[is.na(bt)])#
if(length(st$tip.label)>=minSize) {#
res[[count]]<-st#
count<-count+1#
}}res}
#Fist we need to open some necessary libraries#
library(ape)#
library(geiger)#
#The getAllSubTrees function below is a necessary subfunction that atomizes a tree into each individual subclade and was provided compliments of Luke Harmon.#
getAllSubtrees<-function(phy, minSize=2) {#
res<-list()#
count=1#
ntip<-length(phy$tip.label)#
for(i in 1:phy$Nnode) {#
l<-node.leaves(phy, ntip+i)#
bt<-match(phy$tip.label, l)#
if(sum(is.na(bt))==0) {#
st<-phy#
} else st<-drop.tip(phy, phy$tip.label[is.na(bt)])#
if(length(st$tip.label)>=minSize) {#
res[[count]]<-st#
count<-count+1#
}}res}
#Fist we need to open some necessary libraries#
library(ape)#
library(geiger)#
#The getAllSubTrees function below is a necessary subfunction that atomizes a tree into each individual subclade and was provided compliments of Luke Harmon.#
getAllSubtrees<-function(phy, minSize=2) {#
res<-list()#
count=1#
ntip<-length(phy$tip.label)#
for(i in 1:phy$Nnode) {#
l<-node.leaves(phy, ntip+i)#
bt<-match(phy$tip.label, l)#
if(sum(is.na(bt))==0) {#
st<-phy#
} else st<-drop.tip(phy, phy$tip.label[is.na(bt)])#
if(length(st$tip.label)>=minSize) {#
res[[count]]<-st#
count<-count+1#
}}res
#Fist we need to open some necessary libraries#
library(ape)#
library(geiger)#
#The getAllSubTrees function below is a necessary subfunction that atomizes a tree into each individual subclade and was provided compliments of Luke Harmon.#
getAllSubtrees<-function(phy, minSize=2) {#
res<-list()#
count=1#
ntip<-length(phy$tip.label)#
for(i in 1:phy$Nnode) {#
l<-node.leaves(phy, ntip+i)#
bt<-match(phy$tip.label, l)#
if(sum(is.na(bt))==0) {#
st<-phy#
} else st<-drop.tip(phy, phy$tip.label[is.na(bt)])#
if(length(st$tip.label)>=minSize) {#
res[[count]]<-st#
count<-count+1#
}}res}}
#Fist we need to open some necessary libraries#
library(ape)#
library(geiger)#
#The getAllSubTrees function below is a necessary subfunction that atomizes a tree into each individual subclade and was provided compliments of Luke Harmon.#
getAllSubtrees<-function(phy, minSize=2) {#
res<-list()#
count=1#
ntip<-length(phy$tip.label)#
for(i in 1:phy$Nnode) {#
l<-node.leaves(phy, ntip+i)#
bt<-match(phy$tip.label, l)#
if(sum(is.na(bt))==0) {#
st<-phy#
} else st<-drop.tip(phy, phy$tip.label[is.na(bt)])#
if(length(st$tip.label)>=minSize) {#
res[[count]]<-st#
count<-count+1#
}}res}
getAllSubtrees<-function(phy, minSize=2) {#
	res<-list()#
	count=1#
	ntip<-length(phy$tip.label)#
	for(i in 1:phy$Nnode) {#
	l<-node.leaves(phy, ntip+i)#
	bt<-match(phy$tip.label, l)#
	if(sum(is.na(bt))==0) {#
	st<-phy#
	} else st<-drop.tip(phy, phy$tip.label[is.na(bt)])#
	if(length(st$tip.label)>=minSize) {#
	res[[count]]<-st#
	count<-count+1#
	}}res#
	}
plotBayesBoot <- function(bayesTree,bootTree) {#
getAllSubtrees(bayesTree)->bayesSub#
getAllSubtrees(bootTree)->bootSub#
bootList<-matrix("<50",nnode(bayestree),1)#
#The commands below compare all the subclades in the Bayes tree to all the subclades in the bootstrap tree, and vice versa, and identifies all those clades that are identical.#
for(i in 1:Nnode(bayesTree)) {#
for(j in 1:Nnode(bootTree)) {#
match(bayesSub[[i]]$tip.label[order(bayesSub[[i]]$tip.label)], bootSub[[j]]$tip.label[order(bootSub[[j]]$tip.label)])->shared#
match(bootSub[[j]]$tip.label[order(bootSub[[j]]$tip.label)], bayesSub[[i]]$tip.label[order(bayesSub[[i]]$tip.label)])->shared2#
if(sum(is.na(c(shared,shared2)))==0) {#
bootTree$node.label[j]->bootList[i]#
}}}#
plot(bayesTree, cex=1, lwd=0.5) #Plots your Bayesian consensus tree#
nodelabels(bayesTree$node.label, adj=c(1.2, -0.3), frame="n", cex=1, font=1) #Adds posterior probability values to the tree. Change the 'cex' value to make the fond smaller or larger. A value of 1 will give you a readable result in the R quartz window, but a value closer to 0.25 might be better for publication)#
nodelabels(bootList, adj=c(1.4, 1.3), frame="n", cex=1, font=2) #Adds bootstrap values.#
}
install.packages(c("phytools", "strap", "ape", "gdata"), dependencies=T)
# Install the paleotree package from CRAN:#
install.packages("paleotree", dependencies=T)#
#
# Install the strap package from CRAN:#
install.packages("strap", dependencies=T)#
#
# Install the devtools package from CRAN:#
install.packages("devtools")#
#
# Load the devtools package into R:#
library(devtools)
# Install the Claddis package from GitHub:#
install_github("graemetlloyd/Claddis")
# Load the Claddis package into R:#
library(Claddis)#
#
# Load the paleotree library into R (we will use this for time-scaling our tree later):#
library(paleotree)#
#
# Load the strap library into R (we will use this for plotting a time-scaled tree):#
library(strap)
? claddis
? Claddis
?Claddis
# Before we can use any of the other functions we really need to read in some data.#
# To do this we will use ReadMorphNexus, a function designed to read in morphological data in the common #NEXUS format.#
# Note that for today we will read in a fairly small data set as many of the methods will run too slowly on a larger file to be useful in a 45-minute session!#
# HOWEVER, by all means try to at least load your own data with this function as this is usually the hardest step.#
# Here we are going to use Cullen et al (2013):#
browseURL("http://www.plosone.org/article/info%3Adoi%2F10.1371%2Fjournal.pone.0058853")
nexus.data <- ReadMorphNexus("http://www.graemetlloyd.com/nexus/Cullen_etal_2013a.nex")
nexus.data
names(nexus.data)
nexus.data$matrix
nexus.data$matrix["Sinornithomimus_dongi", 22]
safe.data <- SafeTaxonomicReduction(nexus.data)
safe.data
safe.data$str.list
dist.data <- MorphDistMatrix(nexus.data)
names(dist.data)
any(dist.data$comp.char.matrix == 0)
cmdscale(dist.data$raw.dist.matrix)
dist.data$max.dist.matrix
trimmed.max.data <-TrimMorphDistMatrix(dist.data$max.dist.matrix)
trimmed.max.data$removed.taxa
any(is.na(trimmed.max.data$dist.matrix))
pco.data <- cmdscale(trimmed.max.data$dist.matrix, k=nrow(trimmed.max.data$dist.matrix) - 1, add=T)$points
scree.data <- apply(pco.data, 2, var) / sum(apply(pco.data, 2, var)) * 100
plot(scree.data, type="l", xlab="Ordination axis", ylab="Percentage variance")
PCOx <- 1#
PCOy <- 2
plot(pco.data[, PCOx], pco.data[, PCOy], xlab=paste("PCO ", PCOx, " (", round(scree.data[PCOx], 2), "% variance)", sep=""), ylab=paste("PCO ", PCOy, " (", round(scree.data[PCOy], 2), "% variance)", sep=""), pch=19)
text(pco.data[, PCOx], pco.data[, PCOy], rownames(pco.data))
plot(pco.data[, PCOx], pco.data[, PCOy], xlab=paste("PCO ", PCOx, " (", round(scree.data[PCOx], 2), "% variance)", sep=""), ylab=paste("PCO ", PCOy, " (", round(scree.data[PCOy], 2), "% variance)", sep=""), pch=19)#
#
# This can be a bit tricky to interpret, not least of all because we do not know which point is which taxon.#
# We can fix this by adding the taxon names:#
text(pco.data[, PCOx], pco.data[, PCOy], rownames(pco.data))
tree.data <- read.tree("http://www.graemetlloyd.com/firstmpt/Cullen_etal_2013a.tre")
plot(tree.data)
tree.data <- multi2di(tree.data)
plot(tree.data)
ages.data <- read.table("http://www.graemetlloyd.com/teaching/RE2014/Cullenages.txt", row.names=1, sep="\t", header=T)
tree.data <- timePaleoPhy(tree.data, ages.data, type="mbl", vartime=2)
tree.data$root.time
geoscalePhylo function in the strap package:#
geoscalePhylo(ladderize(tree.data), cex.age=0.6, cex.ts=0.8, cex.tip=1)
geoscalePhylo(ladderize(tree.data), cex.age=0.6, cex.ts=0.8, cex.tip=1)
tree.data
rate.data <- DiscreteCharacterRate(tree.data, nexus.data, seq(tree.data$root.time, tree.data$root.time - max(diag(vcv(tree.data))), length.out=6), alpha=0.01)
rate.data$branch.results
rate.data$branch.results[, c("ml.signif.hi", "ml.signif.lo")]
edge.color <- rep("black", nrow(tree.data$edge))#
edge.color[which(rate.data$branch.results[, "ml.signif.hi"] == 1)] <- "red"#
edge.color[which(rate.data$branch.results[, "ml.signif.lo"] == 1)] <- "blue"
geoscalePhylo(ladderize(tree.data), cex.age=0.6, cex.ts=0.8, cex.tip=1, edge.color=edge.color[match(ladderize(tree.data)$edge[, 2], tree.data$edge[,2])])
rate.data$node.results
rate.data$node.results[, c("ml.signif.hi", "ml.signif.lo")]
rate.data$node.results[, c("ml.signif.hi.ib", "ml.signif.lo.ib")]
node.color <- rep("white", nrow(rate.data$node.results))#
node.color[which(rate.data$node.results[, "ml.signif.hi.ib"] == 1)] <- "red"#
node.color[which(rate.data$node.results[, "ml.signif.lo.ib"] == 1)] <- "blue"#
node.color[which(is.na(rate.data$node.results[, "ml.signif.lo.ib"]))] <- NA
geoscalePhylo(tree.data, cex.age=0.6, cex.ts=0.8, cex.tip=1)
# Now we can plot our tree...:#
geoscalePhylo(tree.data, cex.age=0.6, cex.ts=0.8, cex.tip=1)#
#
# ...and plot our node results on top:#
nodelabels(node=rate.data$node.results[, "node"][!is.na(node.color)], pch=21, col="black", bg=node.color[!is.na(node.color)])
# Because we trimmed our matrix down we also need to remove taxa from our tree that are not in our PCO data.#
# We can do this using drop.tip in ace and setdiff (in base R) and store our answer in a new variable (plot.tree):#
plot.tree <- drop.tip(tree.data, setdiff(tree.data$tip.label, rownames(pco.data)))
# Here we will use the ace function in ape:#
PCOx.anc <- ace(pco.data[, PCOx], plot.tree, type="continuous")$ace#
PCOy.anc <- ace(pco.data[, PCOy], plot.tree, type="continuous")$ace#
#
# Now we
all.PCOx <- c(pco.data[match(plot.tree$tip.label, rownames(pco.data)), PCOx], PCOx.anc)#
all.PCOy <- c(pco.data[match(plot.tree$tip.label, rownames(pco.data)), PCOy], PCOy.anc)
branch.xs <- cbind(all.PCOx[plot.tree$edge[, 1]], all.PCOx[plot.tree$edge[, 2]])#
branch.ys <- cbind(all.PCOy[plot.tree$edge[, 1]], all.PCOy[plot.tree$edge[, 2]])
plot(pco.data[, PCOx], pco.data[, PCOy], xlab=paste("PCO ", PCOx, " (", round(scree.data[PCOx], 2), "% variance)", sep=""), ylab=paste("PCO ", PCOy, " (", round(scree.data[PCOy], 2), "% variance)", sep=""), type="n")
for(i in 1:nrow(branch.xs)) lines(x=branch.xs[i,], y=branch.ys[i,], col="grey", lwd=2)
points(pco.data[, PCOx], pco.data[, PCOy], pch=19)
text(pco.data[, PCOx], pco.data[, PCOy], rownames(pco.data), cex=0.6)
?Claddis
?timePaleoPhy
?paleotree
?DiscreteCharacterRate
?setwd
getwd()
? paleotree
library(paleotree)
? paleotree
library (ape)
? ape
library(DispRity)
library()
library(dispRity)
library(dispRity?)
library(?dispRity)
? dispRity
set.seed(1)#
## Generate a random ultrametric tree#
tree <- rcoal(20)#
#
## Add some node labels#
tree$node.label <- letters[1:19]#
#
## Add it's root time#
tree$root.time <- max(tree.age(tree)$ages)#
#
## Create a slice on the tree at age 0.5#
tree_75 <- slice.tree(tree, age = 0.75, "deltran")
tree
plot(tree)
plot(tree_75)
plot(tree)
? rcoal
tree$root.time
tree$node.label
? dispRity
? claddis
library(claddis)
library(Claddis)
? Claddis
library(beepr)
beepr?
qge
?beepr
?beep
beep(sound=1)
beep(sound=2)
beep(sound=3)
beep(sound=4)
beep(sound=5)
beep(sound=6)
beep(sound=7)
beep(sound=8)
beep(sound=9)
beep(sound=10)
beep(sound=11)
beep(sound=9)
?ping
beep(1)
beep(2)
beep(5)
library(beepr)
beep(9)
library(phangorn)
? phangorn
data(Laurasiatherian)#
set.seed(1)#
bs <- bootstrap.phyDat(Laurasiatherian, FUN = function(x)nj(dist.hamming(x)), #
    bs=50)#
cnet <- consensusNet(bs, .3)#
plot(cnet, "2D")#
## Not run: #
library(rgl)#
open3d()#
plot(cnet, show.tip.label=FALSE, show.nodes=TRUE)#
plot(cnet, type = "2D", show.edge.label=TRUE)#
#
tmpfile <- normalizePath(system.file("extdata/trees/RAxML_bootstrap.woodmouse", package="phangorn"))#
trees <- read.tree(tmpfile)#
cnet_woodmouse <- consensusNet(trees, .3)#
plot(cnet_woodmouse, type = "2D", show.edge.label=TRUE)
library(beepr)
? beep
beep(1)
beep(2)
beep(3)
beep(4)
beep(5)
beep(6)
beep(7)
beep(8)
beep(9)
beep(10)
beep(11)
beep(12)
beep(13)
beep(6)
BF<-2*(log(-1104.05)-(log(-1125.03)))
log10
log(10)
BF<-2*(log(1104.05)-(log(1125.03)))
BF
log(-8)
BF<-2*(log(-1104.05)-(log(-1125.03)))
BF
2*5
BF<-2*(log(1104.05)-(log(1125.03)))
BF
BF<-2*(log(1125.03)-(log(1104.05)))
BF
library(DispRity)
library(dispRity)
data(BeckLee_mat50)#
data(BeckLee_mat99)
head(BeckLee_mat50[, 1:5])
BeckLee_mat50
## Loading a list of first and last occurrence dates for the fossils#
data(BeckLee_ages)#
head(BeckLee_ages)
## Loading and plotting the phylogeny#
data(BeckLee_tree)#
plot(BeckLee_tree, cex = 0.8) #
axisPhylo(root = 140)#
nodelabels(cex = 0.5)
my_tree$root.time <- my_age
## Measuring disparity through time#
disparity_data <- dispRity.through.time(BeckLee_mat50, BeckLee_tree,#
                                        time = 3, metric = c(sum, variances))
disparity_data
## Summarising disparity through time#
summary(disparity_data)
plot(disparity_data, type = "continuous")
disp_lm <- test.dispRity(disparity_data, test = lm, comparisons = "all")
summary(disp_lm)
mammal_groups <- crown.stem(BeckLee_tree, inc.nodes = FALSE)
?crown.stem
??crown.stem
?dispRity
update(dispRity)
package(dispRity)
install.packages("dispRity")
library(dispRity)
?dispRity
library(DispRity)
library(dispRity)
?dispRity
data(BeckLee_mat50)#
data(BeckLee_mat99)
data(BeckLee_ages)
data(BeckLee_tree)#
plot(BeckLee_tree, cex = 0.8) #
axisPhylo(root = 140)#
nodelabels(cex = 0.5)
## Measuring disparity through time#
disparity_data <- dispRity.through.time(BeckLee_mat50, BeckLee_tree,#
                                        time = 3, metric = c(sum, variances))
plot(disparity_data, type = "continuous")
disp_lm <- test.dispRity(disparity_data, test = lm, comparisons = "all")
summary(disp_lm)
## Creating the two groups (crown versus stem) as a list#
mammal_groups <- crown.stem(BeckLee_tree, inc.nodes = FALSE)#
#
## Measuring disparity for each group#
disparity_data <- dispRity.per.group(BeckLee_mat50, group = mammal_groups,#
                                     metric = c(sum, variances))
disparity_data
summary(disparity_data)
plot(disparity_data)
test.dispRity(disparity_data, test = wilcox.test, details = TRUE)
?crown.stem
crown.stem(BeckLeetree)
crown.stem(BeckLee_Tree)
crown.stem(BeckLee_tree)
BeckLee_Tree
## Splitting the tree into two subtrees#
crown_stem_trees <- crown.stem(BeckLee_tree, output.names = FALSE)#
## Graphical parameters#
op <- par(mfrow = c(1,3))#
## Plotting the trees#
plot(BeckLee_tree, main = "Full tree")#
plot(crown_stem_trees$crown, main = "Crown group")#
plot(crown_stem_trees$stem, main = "Stem group")
BeckLee_Tree
summary(BeckLee_Tree)
BeckLee_tree
summary(BeckLee_tree)
**Disparity analysis for early vertebrates, example using Keating *et al.* 2016 and the Github release of dispRity**#
***#
#
**read in packages**#
```r#
library(dispRity)#
library(geomorph)#
library(vegan)#
library(cluster)#
library(Claddis)#
```#
#
**set directory and read in nexus file**#
```r#
setwd("~/Documents/Side_projects/Masters_writeup/EarlyVerts_R_Code/dispRity_Pipeline")#
Kdata <- ReadMorphNexus("Keating16.nex")#
Ktree <- read.nexus("KeatMaj.tre")#
Kdates <- read.csv("Keating16Dates.csv", header=TRUE,row.names=1)#
```#
**Ordinate - currently lazily using default Claddis.ordination settings, but have a think**#
```r#
OrdKdata <- read.tree("KeatMaj.tre")#
```#
#
**Doing disparity through time (disparity metric used the sum of variances as default)**#
```r#
#tree needs a root time - for now guessed at start of Cambrian, choose a better one#
Ktree$root.time <- 541#
#Order dates columns to match tip labels in tree#
Kdates <- Kdates[match(Ktree$tip.label, rownames(Kdates)),]#
#Date tree using Claddis tree dating - check appropriate#
DatedKtree<-DatePhylo(Ktree, Kdates, method="equal", rlen=1)#
## Measuring disparity through time using three time subsets#
disparity_data <- dispRity.through.time(OrdKdata, DatedKtree, time = 3, metric = c(sum, variances))#
## Here I get an error I need to fix to do with not having enough extant tips
library(dispRity)#
library(geomorph)#
library(vegan)#
library(cluster)#
library(Claddis)
setwd("~/Documents/Side_projects/Masters_writeup/EarlyVerts_R_Code/dispRity_Pipeline")#
Kdata <- ReadMorphNexus("Keating16.nex")#
Ktree <- read.nexus("KeatMaj.tre")#
Kdates <- read.csv("Keating16Dates.csv", header=TRUE,row.names=1)
OrdKdata <- read.tree("KeatMaj.tre")
setwd("~/Documents/Side_projects/Masters_writeup/EarlyVerts_R_Code/dispRity_Pipeline")#
Kdata <- ReadMorphNexus("Keating16.nex")#
Ktree <- read.nexus("KeatMaj.tre")#
Kdates <- read.csv("Keating16Dates.csv", header=TRUE,row.names=1)
OrdKdata <- read.tree("KeatMaj.tre")
OrdKdata <- read.nexus("KeatMaj.tre")
#tree needs a root time - for now guessed at start of Cambrian, choose a better one#
Ktree$root.time <- 541#
#Order dates columns to match tip labels in tree#
Kdates <- Kdates[match(Ktree$tip.label, rownames(Kdates)),]#
#Date tree using Claddis tree dating - check appropriate#
DatedKtree<-DatePhylo(Ktree, Kdates, method="equal", rlen=1)#
## Measuring disparity through time using three time subsets#
disparity_data <- dispRity.through.time(OrdKdata, DatedKtree, time = 3, metric = c(sum, variances))#
## Here I get an error I need to fix to do with not having enough extant tips
OrdKdata <- Claddis.ordination(Kdata)
#tree needs a root time - for now guessed at start of Cambrian, choose a better one#
Ktree$root.time <- 541#
#Order dates columns to match tip labels in tree#
Kdates <- Kdates[match(Ktree$tip.label, rownames(Kdates)),]#
#Date tree using Claddis tree dating - check appropriate#
DatedKtree<-DatePhylo(Ktree, Kdates, method="equal", rlen=1)#
## Measuring disparity through time using three time subsets#
disparity_data <- dispRity.through.time(OrdKdata, DatedKtree, time = 3, metric = c(sum, variances))#
## Here I get an error I need to fix to do with not having enough extant tips
(time_bins <- rev(seq(from = 250, to = 600, by = 50)))
(binned_morphospace <- chrono.subsets(data = OrdKdata, tree = Ktree, method = "discrete", time = time_bins, inc.nodes = FALSE,FADLAD = Kdates))
class(binned_morphospace)
names(binned_morphospace)
(boot_bin_morphospace <- boot.matrix(binned_morphospace))
boot_bin_morphospace
## Bootstrapping each time subset 100 times and rarefying them #
(rare_bin_morphospace <- boot.matrix(binned_morphospace, bootstraps = 100,#
    rarefaction = 6))
#Split dataset into subsets#
(binned_Kdata <- chrono.subsets(data = OrdKdata, tree = Ktree, method = "discrete", time = time_bins, inc.nodes = FALSE,FADLAD = Kdates))#
#
# Bootstrapping with bonus rarefaction#
(rare_bin_Kdata <- boot.matrix(binned_Kdata, bootstraps = 100,#
    rarefaction = 6))
(boot_disparity_Kdata <- dispRity(boot_bin_Kdata, metric = c(sum, variances)))
(boot_disparity_Kdata <- dispRity(rare_bin_Kdata, metric = c(sum, variances)))
boot_disparity_Kdata <- dispRity(rare_bin_Kdata, metric = c(sum, variances))
#Make time bins (random 50my)#
time_bins <- rev(seq(from = 250, to = 600, by = 50))#
#
#Split dataset into subsets#
binned_Kdata <- chrono.subsets(data = OrdKdata, tree = Ktree, method = "discrete", time = time_bins, inc.nodes = FALSE,FADLAD = Kdates)#
#
# Bootstrapping with bonus rarefaction#
rare_bin_Kdata <- boot.matrix(binned_Kdata, bootstraps = 100,#
    rarefaction = 6)#
#
#Calculate disparity#
boot_disparity_Kdata <- dispRity(rare_bin_Kdata, metric = c(sum, variances))
summary(boot_disparity)
summary(boot_disparity_Kdata)
quartz(width = 10, height = 5) ; par(mfrow = (c(1,2)), bty = "n")
plot(boot_disparity_Kdata, type = "continuous", main = "bootstrapped results")
> #Plot it up#
quartz(width = 10, height = 5) ; par(mfrow = (c(1,2)), bty = "n")#
plot(boot_disparity_Kdata, type = "continuous", main = "bootstrapped results")
###Doing disparity through time (disparity metric used the sum of variances as default)####
#
#tree needs a root time - for now guessed at start of Cambrian, choose a better one#
Ktree$root.time <- 541#
#
#Order dates columns to match tip labels in tree#
Kdates <- Kdates[match(Ktree$tip.label, rownames(Kdates)),]#
#
#Date tree using Claddis tree dating - check appropriate#
DatedKtree<-DatePhylo(Ktree, Kdates, method="equal", rlen=1)#
#
#Make time bins (random 50my)#
time_bins <- rev(seq(from = 250, to = 600, by = 50))#
#
#Split dataset into subsets#
binned_Kdata <- chrono.subsets(data = OrdKdata, tree = Ktree, method = "discrete", time = time_bins, inc.nodes = FALSE,FADLAD = Kdates)#
#
#Bootstrapping #
(boot_bin_Kdata <- boot.matrix(binned_Kdata))#
#
# Bootstrapping with bonus rarefaction#
rare_bin_Kdata <- boot.matrix(binned_Kdata, bootstraps = 100,#
    rarefaction = 6)#
#
#Calculate disparity for bootstrapped data#
boot_disparity_Kdata <- dispRity(boot_bin_Kdata, metric = c(sum, variances))#
#
#Calculate disparity for rarefied data#
rare_disparity_Kdata <- dispRity(rare_bin_Kdata, metric = c(sum, variances))#
#
#Plot it up#
quartz(width = 10, height = 5) ; par(mfrow = (c(1,2)), bty = "n")#
plot(boot_disparity_Kdata, type = "continuous", main = "bootstrapped results")#
plot(rare_disparity_Kdata, type = "continuous", main = "rarefied results")
##Testing bins difference#
test.dispRity(boot_disparity_Kdata, test = wilcox.test, comparison = "sequential",#
    correction = "bonferroni")
