disparity_time_slices <- dispRity(boot_time_slices, metric = c(sum, variances))
## Creating time bin subsets
time_bins <- chrono.subsets(data = BeckLee_mat99, tree = BeckLee_tree,
method = "discrete", time = c(120, 80, 40, 0), FADLAD = BeckLee_ages,
inc.nodes = TRUE)
## Bootstrapping the time bin subsets
boot_time_bins <- boot.matrix(time_bins, bootstraps = 100)
## Calculate disparity
disparity_time_bins <- dispRity(boot_time_bins, metric = c(sum, variances))
## Default summary
summary(disparity_time_slices)
## Graphical parameters
op <- par(mfrow = c(2, 2), bty = "n")
## Plotting continuous disparity results
plot(disparity_time_slices, type = "continuous")
## Plotting continuous disparity results
plot(disparity_time_slices, type = "continuous")
## Plotting continuous disparity results
plot(disparity_time_slices, type = "continuous")
## Plotting discrete disparity results
plot(disparity_crown_stem, type = "box")
## As above but using lines for the rarefaction level of 20 elements only
plot(disparity_crown_stem, type = "line", rarefaction = 20)
## As above but using polygons while also displaying the number of elements
plot(disparity_crown_stem, type = "polygon", elements = TRUE)
?Claddis.ordination
?dispRity
Kdata
Matrix<-Kdata$matrix
Matrix
matrixtest<-matrix
mt <- matrixtest
mt
matrix
Matrix
mt <- Matrix
mt
mt[mt=="NA"] <- 7
mt
mt[mt==NA] <- 7
mt
mt[mt=="1"] <- 7
mt
?ReadMorphNexus
matrix<- read.csv("Keating16.csv")
matrix
matrix<- read.csv("Keating16.csv", header=FALSE)
matrix
matrix<- read.csv("Keating16.csv", header=TRUE)
matrix<- read.csv("Keating16.csv", header=TRUE)
matrix
matrix<- read.csv("Keating16.csv", header=TRUE)
matrix<- read.csv("Keating16.csv", header=TRUE)
matrix
matrix<- read.csv("Keating16.csv", header=TRUE)
matrix
matrix<- read.csv("Keating16.csv", header=FALSE)
matrix
read.csv?
qerg
?read.csv
matrix<- read.csv("Keating16.csv", header=FALSE, rownames=1)
matrix<- read.csv("Keating16.csv", header=FALSE, row.names=1)
matrix
matrix<- read.csv("Keating16.csv", header=TRUE, row.names=1)
matrix
matrix<- read.csv("Keating16.csv", header=FALSE, row.names=1)
matrix
matrix<- read.csv("Keating16.csv", header=TRUE, row.names=1)
matrix
distances=daisy(matrix, metric=c("gower"))
distances
matrix
matrix[mt==NA] <- 7
Kmatrix<- read.csv("Keating16.csv", header=TRUE, row.names=1)
Kmatrix[Kmatrix==3] <- 4
Kmatrix
Kmatrix<- read.csv("Keating16.csv", header=TRUE, row.names=1)
Kmatrix[Kmatrix=="3"] <- "4"
Kmatrix<- read.csv("Keating16.csv", header=TRUE, row.names=1)
summary(Kmatrix)
Kmatrix
Kmatrix2 <- Kmatrix + 1
warnings()
Kmatrix2
x <- c(1,2,3,4)
x+1
distances=daisy(Kmatrix, metric=c("gower"))
distances
NMDS<-metaMDS(distances, k=3, zerodist="add")
plot(NMDS)
text(NMDS, cex=0.8)
Kmatrix<- read.csv("Keating16.csv", header=TRUE, row.names=1, stringsAsFactors = FALSE)
Kmatrix
Kmatrix2 <- Kmatrix + 1
Kmatrix2
Kmatrix<- read.csv("Keating16.csv", header=TRUE, row.names=1, stringsAsFactors = FALSE)
Kmatrix<- read.csv("Keating16.csv", header=TRUE, row.names=1, stringsAsFactors = FALSE, na.strings=?)
Kmatrix<- read.csv("Keating16.csv", header=TRUE, row.names=1, stringsAsFactors = FALSE, na.strings="?")
Kmatrix
Kmatrix[Kmatrix=="NA"] <- -1
Kmatrix
Kmatrix[Kmatrix==NA] <- -1
Kmatrix
Kmatrix[Kmatrix=="NA"] <- "-1"
Kmatrix
Kmatrix2 Kmatrix[Kmatrix=="NA"] <- "-1"
Kmatrix2 <-Kmatrix[Kmatrix=="NA"] <- "-1"
Kmatrix2
Kmatrix2 <-Kmatrix[Kmatrix==NA] <- -1
Kmatrix2
Kmatrix<- read.csv("Keating16.csv", header=TRUE, row.names=1, stringsAsFactors = FALSE, na.strings="?")
Kmatrix<- read.csv("Keating16.csv", header=TRUE, row.names=1, stringsAsFactors = FALSE, na.strings="?")
Kmatrix2 <- Kmatrix[is.na(d)] <- -1
Kmatrix2 <- Kmatrix[is.na(Kmatrix)] <- -1
Kmatrix2
Kmatrix2 <- Kmatrix[is.na(Kmatrix)] <- 0
Kmatrix2
Kmatrix
Kmatrix<- read.csv("Keating16.csv", header=TRUE, row.names=1, stringsAsFactors = FALSE, na.strings="?")
Kmatrix
Kmatrix[is.na(Kmatrix)] <- 0
Lmatrix
Kmatrix
Kmatrix<- read.csv("Keating16.csv", header=TRUE, row.names=1, stringsAsFactors = FALSE, na.strings="?")
Kmatrix<- read.csv("Keating16.csv", header=TRUE, row.names=1, stringsAsFactors = FALSE, na.strings="?")
Kmatrix
Kmatrix<- read.csv("Keating16.csv", header=TRUE, row.names=1, stringsAsFactors = FALSE, na.strings="?", colClasses = "numeric")
Kmatrix<- read.csv("Keating16.csv", header=TRUE, row.names=1, stringsAsFactors = FALSE, na.strings="?")
Kmatrix<- read.csv("Keating16.csv", header=TRUE, row.names=1, stringsAsFactors = FALSE)
Kmatrix
Kmatrix[Kmatrix=="-"] <- 0
Kmatrix
Kmatrix<- read.csv("Keating16.csv", header=TRUE, row.names=1, stringsAsFactors = FALSE)
Kmatrix[Kmatrix=="-"] <- -1
Kmatrix
Kmatrix<- read.csv("Keating16.csv", header=TRUE, row.names=1, stringsAsFactors = FALSE)
Kmatrix<- read.csv("Keating16.csv", header=TRUE, row.names=1, stringsAsFactors = FALSE, na.strings="?")
Kmatrix
Kmatrix[Kmatrix=="-"] <- -1
Kmatrix
Kmatrix<- read.csv("Keating16.csv", header=TRUE, row.names=1, na.strings="?")
Kmatrix
Kmatrix <- as.numeric(as.character(Kmatrix))
Kmatrix
Kmatrix<- read.csv("Keating16.csv", header=TRUE, row.names=1, na.strings="?")
Kmatrix[Kmatrix=="-"] <- -1
warnings()
Kmatrix<- read.csv("Keating16.csv", header=TRUE, row.names=1, stringsAsFactors = FALSE, na.strings="?")
Kmatrix[Kmatrix=="-"] <- -1
Kmatrix
Kmatrix <- as.numeric(as.character(Kmatrix))
Kmatirx
Kmatrx
Kmatrix
Kmatrix<- read.csv("Keating16.csv", header=TRUE, row.names=1, stringsAsFactors = FALSE, na.strings="?")
Kmatrix <- as.numeric(as.character(Kmatrix))
Kmatrix<- read.csv("Keating16.csv", header=TRUE, row.names=1, stringsAsFactors = FALSE, na.strings="?")
Kmatrix[Kmatrix=="-"] <- -1
?factor
Kmatrix+1
Kmatrix<-Kmatrix+1
Kmatrix<- read.csv("Keating16.csv", header=TRUE, row.names=1)
Kmatrix
as.numeric(as.character(Kmatrix))
Kmatrix<- read.csv("Keating16.csv", header=TRUE, row.names=1)
as.numeric(as.character(Kmatrix[[1]]))
all <- data.frame(cbind(site, year, model, x, y, z))
data(cars)
all <- data.frame(cbind(site, year, model, x, y, z))
is.numeric(Kmatrix)
is.factor(Kmatrix)
indx <- sapply(Kmatrix, is.factor)
breast[indx] <- lapply(Kmatrix[indx], function(x) as.numeric(as.character(x)))
indx <- sapply(Kmatrix, is.factor)
Kmatrix[indx] <- lapply(Kmatrix[indx], function(x) as.numeric(as.character(x)))
Kmatrix
Kmatrix <- read.csv("Keating16.csv", header=TRUE, row.names=1, stringsAsFactors = FALSE, na.strings="?") #Reads ? as NA?
Kmatrix[Kmatrix=="-"] <- -1
indx <- sapply(Kmatrix, is.factor)
Kmatrix[indx] <- lapply(Kmatrix[indx], function(x) as.numeric(as.character(x)))
Kmatrix
Kmatrix <- read.csv("Keating16.csv", header=TRUE, row.names=1, stringsAsFactors = FALSE, na.strings="?") #Reads ? as NA?
Kmatrix
indx <- sapply(Kmatrix, is.factor)
Kmatrix[indx] <- lapply(Kmatrix[indx], function(x) as.numeric(as.character(x)))
Kmatrix
Kmatrix <- read.csv("Keating16.csv", header=TRUE, row.names=1) #Reads ? as NA?
indx <- sapply(Kmatrix, is.factor)
Kmatrix[indx] <- lapply(Kmatrix[indx], function(x) as.numeric(as.character(x)))
Kmatrix
?sapply
Kmatrix <- read.csv("Keating16.csv", header=TRUE, row.names=1) #Reads ? as NA?
Kmatrix
Kmatrix[Kmatrix=="-"] <- -1
Kmatrix
Kmatrix[Kmatrix=="-"] <- "-1"
Kmatrix <- read.csv("Keating16.csv", header=TRUE, row.names=1) #Reads ? as NA?
Kmatrix[Kmatrix=="-"] <- "-1"
Kmatrix
Kmatrix[Kmatrix=="-"] <- "-1"
Kmatrix <- read.csv("Keating16.csv", header=TRUE, row.names=1) #Reads ? as NA?
Kmatrix[Kmatrix=="-"] <- "-1"
warnings()
Kmatrix <- read.csv("Keating16.csv", header=TRUE, row.names=1) #Reads ? as NA?
levels(Kmatrix)
levels(Kmatrix$X1)
Kmatrix <- read.csv("Keating16.csv", header=TRUE, row.names=1, stringsAsFactors = FALSE, na.strings="?") #Reads ? as NA?
Kmatrix[Kmatrix=="-"] <- -1
Kmatrix
is.factor(Kmatrix$X1)
is.numeric(Kmatrix$X1)
is.numeric(Kmatrix$X14)
is.factor(Kmatrix$X14)
?is.factor
str(Kmatrix)
?`str
dhg
?`strweg
?str
sapply(Kmatrix)
sapply(Kmatrix, mode)
transform(Kmatrix, char = as.numeric(char))
Kmatrix<-as.numeric(Kmatrix)
Kmatrix <- read.csv("Keating16.csv", header=TRUE, row.names=1) #Reads ? as NA?
Kmatrix
sapply(Kmatrix, mode)
Kmatrix+1
Kmatrix <- read.csv("Keating16.csv", header=TRUE, row.names=1, stringsAsFactors = FALSE, na.strings="?") #Reads ? as NA?
sapply(Kmatrix, mode)
Kmatrix
indx <- sapply(Kmatrix, is.character)
indx
lapply
?lapply
indx <- sapply(Kmatrix, is.character)
Kmatrix[indx] <- lapply(Kmatrix[indx], function(Kmatrix) as.numeric(as.character(Kmatrix)))
warnings()
Kmatrix
Kmatrix <- read.csv("Keating16.csv", header=TRUE, row.names=1, stringsAsFactors = FALSE, na.strings="?") #Reads ? as NA?
Kmatrix
indx <- sapply(Kmatrix, is.character)
Kmatrix[indx] <- lapply(Kmatrix[indx], function(Kmatrix) as.numeric(as.character(Kmatrix)))
Kmatrix
indx <- sapply(Kmatrix, is.character)
Kmatrix[indx] <- lapply(Kmatrix[indx], function(Kmatrix) as.numeric(as.character(Kmatrix)))
Kmatrix
Kmatrix <- read.csv("Keating16.csv", header=TRUE, row.names=1, stringsAsFactors = FALSE, na.strings="?") #Reads ? as NA?
Kmatrix
Kmatrix[Kmatrix=="-"] <- -1
Kmatrix
indx <- sapply(Kmatrix, is.character)
Kmatrix[indx] <- lapply(Kmatrix[indx], function(Kmatrix) as.numeric(as.character(Kmatrix)))
Kmatrix
Kmatrix+1
sapply(Kmatrix, mode)
Kmatrix <- read.csv("Keating16.csv", header=TRUE, row.names=1, stringsAsFactors = FALSE, na.strings="?") #Reads ? as NA?
#Replace - with -1 (will become 0 later)
Kmatrix[Kmatrix=="-"] <- -1
#Convert all remaining character columns into numeric
indx <- sapply(Kmatrix, is.character)
Kmatrix[indx] <- lapply(Kmatrix[indx], function(Kmatrix) as.numeric(as.character(Kmatrix)))
#Add 1 to all values
Kmatrix+1
#Replace - with -1 (will become 0 later)
Kmatrix[Kmatrix=="-"] <- -1
#Convert all remaining character columns into numeric
indx <- sapply(Kmatrix, is.character)
Kmatrix[indx] <- lapply(Kmatrix[indx], function(Kmatrix) as.numeric(as.character(Kmatrix)))
#Add 1 to all values
Kmatrix <- Kmatrix+1
Kmatrix
#Replace - with -1 (will become 0 later)
Kmatrix[Kmatrix=="-"] <- -1
#Convert all remaining character columns into numeric
indx <- sapply(Kmatrix, is.character)
Kmatrix[indx] <- lapply(Kmatrix[indx], function(Kmatrix) as.numeric(as.character(Kmatrix)))
#Add 1 to all values
Kdata <- Kmatrix+1
OrdKdata <- Claddis.ordination(Kdata)
Kdistances=daisy(Kdata, metric=c("gower"))
NMDS<-metaMDS(distances, k=3, zerodist="add")
Kdistances=daisy(Kdata, metric=c("gower"))
NMDS<-metaMDS(distances, k=3, zerodist="add")
NMDS
summary(NMDS)
#Normal with text
plot(NMDS)
text(NMDS, cex=0.8)
str(NMDS)
names(NMDS)
setwd("~/Documents/Side_projects/Masters_writeup/EarlyVerts_R_Code/dispRity_Pipeline")
#Kdata <- ReadMorphNexus("Keating16.nex")
Ktree <- read.nexus("KeatMaj.tre")
Kdates <- read.csv("Keating16Dates.csv", header=TRUE,row.names=1)
Kmatrix <- read.csv("Keating16.csv", header=TRUE, row.names=1, stringsAsFactors = FALSE, na.strings="?") #Reads ? as NA?
#Replace - with -1 (will become 0 later)
Kmatrix[Kmatrix=="-"] <- -1
#Convert all remaining character columns into numeric
indx <- sapply(Kmatrix, is.character)
Kmatrix[indx] <- lapply(Kmatrix[indx], function(Kmatrix) as.numeric(as.character(Kmatrix)))
#Add 1 to all values
Kdata <- Kmatrix+1
Kdistances=daisy(Kdata, metric=c("gower"))
NMDS<-metaMDS(Kdistances, k=3, zerodist="add")
plot(NMDS)
text(NMDS, cex=0.8)
?NMDS
?metaMDS
NMDS$points
Ktree$root.time <- 541
Kdates <- Kdates[match(Ktree$tip.label, rownames(Kdates)),]
Date tree using Claddis tree dating - check dating method appropriate
```{r warning=FALSE}
DatedKtree<-DatePhylo(Ktree, Kdates, method="equal", rlen=1)
```
DatedKtree<-DatePhylo(Ktree, Kdates, method="equal", rlen=1)
time_bins <- rev(seq(from = 250, to = 600, by = 50))
Ordkdata<-kdataNMDS$points
Kdistances=daisy(Kdata, metric=c("gower"))
kdataNMDS<-metaMDS(Kdistances, k=3, zerodist="add")
#n.b. Ordination is stored in:
Ordkdata<-kdataNMDS$points
binned_Kdata <- chrono.subsets(data = OrdKdata, tree = Ktree, method = "discrete", time = time_bins, inc.nodes = FALSE,FADLAD = Kdates)
Bootstrapping , first just that and then with bonus rarefaction
```{r warning=FALSE}
boot_bin_Kdata <- boot.matrix(binned_Kdata)
rare_bin_Kdata <- boot.matrix(binned_Kdata, bootstraps = 100,rarefaction = 6)
```
Calculate disparity for both datasets
```{r warning=FALSE}
boot_disparity_Kdata <- dispRity(boot_bin_Kdata, metric = c(sum, variances))
rare_disparity_Kdata <- dispRity(rare_bin_Kdata, metric = c(sum, variances))
```
Plot it up
```{r warning=FALSE}
#quartz(width = 10, height = 5) ; par(mfrow = (c(1,2)), bty = "n")
plot(boot_disparity_Kdata, type = "continuous", main = "bootstrapped results")
plot(rare_disparity_Kdata, type = "continuous", main = "rarefied results")
```
boot_bin_Kdata <- boot.matrix(binned_Kdata)
rare_bin_Kdata <- boot.matrix(binned_Kdata, bootstraps = 100,rarefaction = 6)
boot_disparity_Kdata <- dispRity(boot_bin_Kdata, metric = c(sum, variances))
rare_disparity_Kdata <- dispRity(rare_bin_Kdata, metric = c(sum, variances))
plot(boot_disparity_Kdata, type = "continuous", main = "bootstrapped results")
plot(rare_disparity_Kdata, type = "continuous", main = "rarefied results")
Ktree$root.time <- 541
Kdates <- Kdates[match(Ktree$tip.label, rownames(Kdates)),]
DatedKtree<-DatePhylo(Ktree, Kdates, method="equal", rlen=1)
time_bins <- rev(seq(from = 250, to = 600, by = 50))
binned_Kdata <- chrono.subsets(data = Ordkdata, tree = Ktree, method = "discrete", time = time_bins, inc.nodes = FALSE,FADLAD = Kdates)
Ordkdata
kdataNMDS$species
kdataNMDS2<-metaMDSredist(Kdistances, k=3, zerodist="add")
names(kdataNMDS)
head(kdataNMDS)
?head
?names
?metaMDS
kdataNMDS$stress
#Run metaMDS with different numbers of axes
NMDS1=metaMDS(Kdistances, k=1, zerodist="add")
NMDS2=metaMDS(Kdistances, k=2, zerodist="add")
NMDS3=metaMDS(Kdistances, k=3, zerodist="add")
NMDS4=metaMDS(Kdistances, k=4, zerodist="add")
NMDS5=metaMDS(Kdistances, k=5, zerodist="add")
NMDS6=metaMDS(Kdistances, k=6, zerodist="add")
NMDS7=metaMDS(Kdistances, k=7, zerodist="add")
NMDS8=metaMDS(Kdistances, k=8, zerodist="add")
NMDS9=metaMDS(Kdistances, k=9, zerodist="add")
NMDS10=metaMDS(Kdistances, k=10, zerodist="add")
#Make vector containing stresses
Stresses=c(NMDS1$stress, NMDS2$stress, NMDS3$stress, NMDS4$stress, NMDS5$stress, NMDS6$stress, NMDS7$stress, NMDS8$stress, NMDS9$stress, NMDS10$stress)
barplot(Stresses, ylim=c(0, 0.30), names.arg=c(1:10), xlab="No. of axes", ylab="Stress")
plot(kdataNMDS)
text(kdataNMDS, cex=0.8)
OrdKdata
Ordkdata
?dim
n<-dim(Ordkdata)[1]
n
Kmatrix <- read.csv("Keating16.csv", header=TRUE, row.names=1, stringsAsFactors = FALSE, na.strings="?") #Reads ? as NA?
Kmatrix
#Replace - with -1 (will become 0 later)
Kmatrix[Kmatrix=="-"] <- -1
#Convert all remaining character columns into numeric
indx <- sapply(Kmatrix, is.character)
Kmatrix[indx] <- lapply(Kmatrix[indx], function(Kmatrix) as.numeric(as.character(Kmatrix)))
#Add 1 to all values
Kdata <- Kmatrix+1
Kdata
Kdistances=daisy(Kdata, metric=c("gower"))
kdataNMDS<-metaMDS(Kdistances, k=3, zerodist="add")
#n.b. Ordination is stored in:
Ordkdata<-kdataNMDS$points
Ordkdata
binned_Kdata <- chrono.subsets(data = Ordkdata, tree = Ktree, method = "discrete", time = time_bins, inc.nodes = FALSE,FADLAD = Kdates)
boot_bin_Kdata <- boot.matrix(binned_Kdata)
rare_bin_Kdata <- boot.matrix(binned_Kdata, bootstraps = 100,rarefaction = 6)
boot_disparity_Kdata <- dispRity(boot_bin_Kdata, metric = c(sum, variances))
rare_disparity_Kdata <- dispRity(rare_bin_Kdata, metric = c(sum, variances))
plot(boot_disparity_Kdata, type = "continuous", main = "bootstrapped results")
plot(rare_disparity_Kdata, type = "continuous", main = "rarefied results")
setwd("~/Documents/Side_projects/Masters_writeup/EarlyVerts_R_Code/dispRity_Pipeline")
Ktree <- read.nexus("../KeatMaj.tre")
Ktree
#Break polytomies randomly
Ktree <- multi2di(Ktree)
#Reorder dates file to get in line with tree file
Kdates <- Kdates[match(Ktree$tip.label, rownames(Kdates)),]
#Scale tree using fads and lads
tree.data <- timePaleoPhy(Ktree, Kdates, type="mbl", vartime=2)
library(Claddis)
library(paleotree)
library(strap)
setwd("~/Documents/Side_projects/Masters_writeup/EarlyVerts_R_Code/dispRity_Pipeline")
Kdata <- ReadMorphNexus("../Keating16.nex")
Ktree <- read.nexus("../KeatMaj.tre")
Kdates <- read.csv("../Keating16Dates.csv", header=TRUE,row.names=1)
#Break polytomies randomly
Ktree <- multi2di(Ktree)
#Reorder dates file to get in line with tree file
Kdates <- Kdates[match(Ktree$tip.label, rownames(Kdates)),]
#Scale tree using fads and lads
tree.data <- DatePhylo(Ktree, Kdates, type="mbl", vartime=2)
#Break polytomies randomly
Ktree <- multi2di(Ktree)
#Reorder dates file to get in line with tree file
Kdates <- Kdates[match(Ktree$tip.label, rownames(Kdates)),]
#Scale tree using fads and lads
tree.data <- DatePhylo(Ktree, Kdates,method="equal", rlen=1)
geoscalePhylo(ladderize(tree.data), cex.age=0.6, cex.ts=0.8, cex.tip=0.1)
geoscalePhylo(ladderize(tree.data), cex.age=0.6, cex.ts=0.8, cex.tip=0.5)
geoscalePhylo(ladderize(tree.data), cex.age=0.6, cex.ts=0.8, cex.tip=0.7)
rate.data <- DiscreteCharacterRate(tree.data, nexus.data, seq(tree.data$root.time, tree.data$root.time - max(diag(vcv(tree.data))), length.out=6), alpha=0.01)
```{r warning=FALSE}
rate.data <- DiscreteCharacterRate(Ktree, Kdata, seq(Ktree$root.time, Ktree$root.time - max(diag(vcv(tree.data))), length.out=6), alpha=0.01)
```
rate.data <- DiscreteCharacterRate(Ktree, Kdata, seq(Ktree$root.time, Ktree$root.time - max(diag(vcv(tree.data))), length.out=6), alpha=0.01)
#Break polytomies randomly
Ktree <- multi2di(Ktree)
#Reorder dates file to get in line with tree file
Kdates <- Kdates[match(Ktree$tip.label, rownames(Kdates)),]
#Scale tree using fads and lads
Ktree <- DatePhylo(Ktree, Kdates,method="equal", rlen=1)
#plot with geoscale (to check worked)
geoscalePhylo(ladderize(Ktree), cex.age=0.6, cex.ts=0.8, cex.tip=0.1)
rate.data <- DiscreteCharacterRate(Ktree, Kdata, seq(Ktree$root.time, Ktree$root.time - max(diag(vcv(Ktree))), length.out=6), alpha=0.01)
#Set up edge colours
edge.color <- rep("black", nrow(tree.data$edge))
edge.color[which(rate.data$branch.results[, "ml.signif.hi"] == 1)] <- "red"
edge.color[which(rate.data$branch.results[, "ml.signif.lo"] == 1)] <- "blue"
#Plot with these colours
# pdf("VertEdgeRates.pdf")
geoscalePhylo(ladderize(tree.data), cex.age=0.6, cex.ts=0.8, cex.tip=0.2, edge.color=edge.color[match(ladderize(tree.data)$edge[, 2], tree.data$edge[,2])])
# dev.off()
#Set up edge colours
edge.color <- rep("black", nrow(tree.data$edge))
edge.color[which(rate.data$branch.results[, "ml.signif.hi"] == 1)] <- "red"
edge.color[which(rate.data$branch.results[, "ml.signif.lo"] == 1)] <- "blue"
#Plot with these colours
# pdf("VertEdgeRates.pdf")
geoscalePhylo(ladderize(tree.data), cex.age=0.6, cex.ts=0.8, cex.tip=0.8, edge.color=edge.color[match(ladderize(tree.data)$edge[, 2], tree.data$edge[,2])])
# dev.off()
#Set up node colours
node.color <- rep("white", nrow(rate.data$node.results))
node.color[which(rate.data$node.results[, "ml.signif.hi.ib"] == 1)] <- "red"
node.color[which(rate.data$node.results[, "ml.signif.lo.ib"] == 1)] <- "blue"
node.color[which(is.na(rate.data$node.results[, "ml.signif.lo.ib"]))] <- NA
# Plot tree with node rates
pdf("VertNodeRates.pdf")
geoscalePhylo(tree.data, cex.age=0.6, cex.ts=0.8, cex.tip=0.2)
nodelabels(node=rate.data$node.results[, "node"][!is.na(node.color)], pch=21, col="black", bg=node.color[!is.na(node.color)])
dev.off()
#Set up node colours
node.color <- rep("white", nrow(rate.data$node.results))
node.color[which(rate.data$node.results[, "ml.signif.hi.ib"] == 1)] <- "red"
node.color[which(rate.data$node.results[, "ml.signif.lo.ib"] == 1)] <- "blue"
node.color[which(is.na(rate.data$node.results[, "ml.signif.lo.ib"]))] <- NA
# Plot tree with node rates
#pdf("VertNodeRates.pdf")
geoscalePhylo(tree.data, cex.age=0.6, cex.ts=0.8, cex.tip=0.2)
nodelabels(node=rate.data$node.results[, "node"][!is.na(node.color)], pch=21, col="black", bg=node.color[!is.na(node.color)])
#dev.off()
#Set up node colours
node.color <- rep("white", nrow(rate.data$node.results))
node.color[which(rate.data$node.results[, "ml.signif.hi.ib"] == 1)] <- "red"
node.color[which(rate.data$node.results[, "ml.signif.lo.ib"] == 1)] <- "blue"
node.color[which(is.na(rate.data$node.results[, "ml.signif.lo.ib"]))] <- NA
# Plot tree with node rates
#pdf("VertNodeRates.pdf")
geoscalePhylo(tree.data, cex.age=0.6, cex.ts=0.8, cex.tip=0.8)
nodelabels(node=rate.data$node.results[, "node"][!is.na(node.color)], pch=21, col="black", bg=node.color[!is.na(node.color)])
#dev.off()
#Set up edge colours
edge.color <- rep("black", nrow(Ktree$edge))
edge.color[which(rate.data$branch.results[, "ml.signif.hi"] == 1)] <- "red"
edge.color[which(rate.data$branch.results[, "ml.signif.lo"] == 1)] <- "blue"
#Plot with these colours
# pdf("VertEdgeRates.pdf")
geoscalePhylo(ladderize(Ktree), cex.age=0.6, cex.ts=0.8, cex.tip=0.8, edge.color=edge.color[match(ladderize(Ktree)$edge[, 2], Ktree$edge[,2])])
# dev.off()
#Set up node colours
node.color <- rep("white", nrow(rate.data$node.results))
node.color[which(rate.data$node.results[, "ml.signif.hi.ib"] == 1)] <- "red"
node.color[which(rate.data$node.results[, "ml.signif.lo.ib"] == 1)] <- "blue"
node.color[which(is.na(rate.data$node.results[, "ml.signif.lo.ib"]))] <- NA
# Plot tree with node rates
#pdf("VertNodeRates.pdf")
geoscalePhylo(Ktree, cex.age=0.6, cex.ts=0.8, cex.tip=0.8)
nodelabels(node=rate.data$node.results[, "node"][!is.na(node.color)], pch=21, col="black", bg=node.color[!is.na(node.color)])
#dev.off()
